import Data.Char
esMin :: Char -> Bool
esMin x = isLower x
contarelementos :: [a] -> Integer
contarelementos [] = 0
contarelementos x = 1 + contarelementos (tail x)
letANat :: Char -> Integer
letANat x | (esMin x) = (contarelementos ['a'..x]) - 1
	  | otherwise = undefined
tomarN :: (Eq a) => Integer -> [a] -> [a]
tomarN n x | (n <= 0) || (x == []) = []
	   | otherwise = [head x] ++ tomarN (n-1) (tail x)
natALet :: Integer -> Char
natALet x | (x >= 0) && (x <= 25) = last (tomarN (x+1) ['a'..'z'])
	  | otherwise = undefined
desplazar :: Integer -> Char -> Char
desplazar n l | (n >= 0) && (n <= 25) && (esMin l) && (letANat l + n <= 25) = natALet (letANat l + n)
	      | (n >= 0) && (n <= 25) && (esMin l) && (letANat l + n > 25) = natALet (letANat l + n - 26)
	      | otherwise = l
codificar :: Integer -> String -> String
codificar n [] = []
codificar n x | n <= 25 = (desplazar n (head x)) : (codificar n (tail x))
codificar n x | otherwise = (desplazar (n- (div n 25)*25) (head x)) : (codificar (n- (div n 25)*25) (tail x))
decodificar :: Integer -> String -> String
decodificar n [] = []
decodificar n x | n <= 25 = (codificar (26-n) x)
decodificar n x | otherwise = (codificar (26-(n- (div n 25)*25)) x)

contar :: Char -> String -> Integer
contar x [] = 0
contar x y | (head y) == x = 1 + contar x (tail y)
	   | otherwise = contar x (tail y)


- Volvi a definir otra vez las funciones para que vayan a Float -
cantMinusc' :: String -> Float
cantMinusc' [] = 0
cantMinusc' x | (esMin (head x)) = 1 + cantMinusc' (tail x)
	      | otherwise = cantMinusc' (tail x)
contar' :: Char -> String -> Float
contar' x [] = 0
contar' x y | (head y) == x = 1 + contar' x (tail y)
	    | otherwise = contar' x (tail y)

contarporcentajes :: String -> String -> [Float]
contarporcentajes x y | x == [] || y == [] = []
		      | otherwise = [(100 * (contar' (head x) y))/cantMinusc' y] ++ contarporcentajes (tail x) y
frec :: String -> [Float]
frec [] = take 26 (repeat 0)
frec x = contarporcentajes ['a'..'z'] x

tomarLast :: (Eq a) => Integer -> [a] -> [a]
tomarLast n x | (n <= 0) || (x == []) = []
	      | otherwise = tomarLast (n-1) (init x) ++ [last x]
rotar :: (Eq a) => Integer -> [a] -> [a]
rotar x y | x == 0 || y == [] = []
	  | (contarelementos y < x) = rotar (x - contarelementos y) y
	  | otherwise = (tomarLast ((contarelementos y) - x) y) ++ (tomarN x y)

chi2 :: [Float] -> [Float] -> Float
chi2 x y | (y == []) || (length x /= length y)= undefined
	 | (length x == 1) && (length y == 1) = (head x - head y)^2/head y
	 | otherwise = (((head x - head y)^2)/(head y)) + chi2 (tail x) (tail y)

chi2 :: [Float] -> [Float] -> Float
chi2 x y | (length x /= length y)= undefined
         | (x == []) && (y == []) = 0
         | otherwise = (((head x - head y)^2)/(head y)) + chi2 (tail x) (tail y)
         
--------------------------
chi2 :: [Float] -> [Float] -> Float
chi2 [] [] = 0
chi2 (x:xs) (y:ys) = ((x-y)^2 / y) + chi2 xs ys
